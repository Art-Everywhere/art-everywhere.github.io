{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Art Everywhere","text":"<p>This will be the documentation eventually hosted at <code>docs.</code> whatever URL we choose.</p>"},{"location":"contract-development/Log/","title":"Devlog","text":""},{"location":"contract-development/Log/#step-1-environment-setup","title":"Step 1: Environment Setup","text":""},{"location":"contract-development/Log/#11-choose-a-development-framework","title":"1.1 Choose a Development Framework","text":"<ul> <li>Framework Used: Truffle</li> <li>Version: [Specify the version, e.g., Truffle v5.4.0]</li> </ul>"},{"location":"contract-development/Log/#12-ide-integration","title":"1.2 IDE Integration","text":"<ul> <li>IDE Used: Visual Studio Code</li> <li>Extension Used: Truffle</li> </ul>"},{"location":"contract-development/Log/#13-local-testing-setup","title":"1.3 Local Testing Setup","text":"<ul> <li>Blockchain Test Environment: Ganache</li> <li>Version: 2.7.1</li> </ul>"},{"location":"contract-development/Log/#14-initialize-smart-contract-project","title":"1.4 Initialize Smart Contract Project","text":"<ul> <li>Project Initialization: Truffle init</li> <li>Directory Structure:</li> </ul> <pre><code>.\n\u251c\u2500\u2500 contracts\n\u251c\u2500\u2500 migrations\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 test\n\u2514\u2500\u2500 truffle-config.js\n</code></pre>"},{"location":"contract-development/Log/#user-wallet-management-and-minting-options","title":"User Wallet Management and Minting Options","text":"<p>In Art Everywhere, users interact with the platform through their Ethereum wallets. Here's an exploration of two potential user scenarios:</p>"},{"location":"contract-development/Log/#option-1-metamask-authentication-with-backend-minting","title":"Option 1: Metamask Authentication with Backend Minting","text":"<ul> <li> <p>Pros:</p> <ul> <li>Users leverage the security and familiarity of MetaMask.</li> <li>Simplifies backend integration, leveraging MetaMask's web3 provider.</li> </ul> </li> <li> <p>Cons:</p> <ul> <li>Users need a MetaMask wallet and some ETH for gas fees.</li> <li>Slightly more complex initial setup for users.</li> </ul> </li> </ul>"},{"location":"contract-development/Log/#option-2-backend-managed-crypto-wallets","title":"Option 2: Backend-Managed Crypto Wallets","text":"<ul> <li> <p>Pros:</p> <ul> <li>Complete control and management by the backend.</li> <li>Streamlines onboarding for less experienced users.</li> </ul> </li> <li> <p>Cons:</p> <ul> <li>Development complexity is significantly higher.</li> <li>Potential security and responsibility concerns.</li> </ul> </li> </ul>"},{"location":"contract-development/Log/#recommendation","title":"Recommendation:","text":"<p>Considering simplicity and development efficiency, Option 1 is recommended. It balances user familiarity and backend management efficiency.</p> <p>For more details and potential future explorations, visit the Art Everywhere Documentation Repository.</p>"},{"location":"contract-development/Log/#arteverywherenft-smart-contract","title":"ArtEverywhereNFT Smart Contract","text":"<p>The Art Everywhere NFT smart contract, deployed on the Ethereum blockchain, serves as the backbone of your decentralized art marketplace. Here's an overview of its features:</p>"},{"location":"contract-development/Log/#minting-artworks","title":"Minting Artworks","text":"<ul> <li>Users with the <code>MINTER_ROLE</code> can mint new artworks on the platform.</li> <li>Each minting transaction ensures the uniqueness of the generated NFT.</li> </ul>"},{"location":"contract-development/Log/#gas-wallet-integration","title":"Gas Wallet Integration","text":"<ul> <li>The contract includes functionality to fund the backend's gas wallet.</li> <li>The <code>fundGasWallet</code> function allows the owner to transfer ETH to the gas wallet for backend transactions.</li> </ul>"},{"location":"contract-development/Log/#events-and-notifications","title":"Events and Notifications","text":"<ul> <li>Events are emitted to notify external systems when an artwork is successfully minted.</li> <li>The <code>ArtworkMinted</code> event includes relevant information, such as the artist's address and the NFT's token ID.</li> </ul>"},{"location":"contract-development/Log/#access-control","title":"Access Control","text":"<ul> <li>Access to minting functionality is controlled by the <code>MINTER_ROLE</code>.</li> <li>The <code>onlyMinter</code> modifier ensures that only authorized users can execute minting functions.</li> </ul>"},{"location":"contract-development/Log/#initialization","title":"Initialization","text":"<ul> <li>The contract is initialized with essential parameters, including the gas wallet address.</li> <li>Default admin and minting roles are granted during deployment.</li> </ul> <p>For detailed code snippets and usage instructions, refer to the Art Everywhere NFT Smart Contract Repository.</p>"},{"location":"contract-development/Log/#update-summary","title":"Update Summary","text":"<ul> <li>Resolved issues related to ERC721 and OpenZeppelin version compatibility.</li> <li>Updated the contract to comply with the latest OpenZeppelin standards.</li> <li>Implemented access control for minting functionality using the <code>MINTER_ROLE</code>.</li> <li>Added a <code>fundGasWallet</code> function to facilitate ETH transfers for backend transactions.</li> </ul>"},{"location":"contract-development/Log/#arteverywherenfttestjs","title":"ArtEverywhereNFT.test.js","text":"<p>The ArtEverywhereNFT.test.js file contains the test cases for validating the functionality of the ArtEverywhereNFT smart contract. Below is a summary of the updates and discussions:</p> <ul> <li>Created a test case to ensure the successful deployment of the ArtEverywhereNFT contract.</li> <li>Ongoing discussions and debugging related to deployment issues and test execution.</li> <li>Consideration of different user scenarios and minting options for the ArtEverywhere platform.</li> </ul> <p>For more details and potential future explorations, visit the Art Everywhere Documentation Repository.</p>"}]}